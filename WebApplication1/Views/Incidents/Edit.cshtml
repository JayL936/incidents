@model WebApplication1.Models.IncidentsViewModel

@{
    ViewBag.Title = "Edit";
}

<script src="http://maps.googleapis.com/maps/api/js"></script>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"></script>
<script type="text/javascript">

    var map;
    var markers = [];
    var marker = new google.maps.Marker;
    var geocoder;
    var infowindow = new google.maps.InfoWindow;


    function initialize() {
        var mapProp = {
            center: new google.maps.LatLng(52.229491, 21.002137),
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
        geocoder = new google.maps.Geocoder;
        var lat = document.getElementById('@Html.IdFor(model => model.Lat)').value;
        lat = lat.replace(",", ".");
        var long = document.getElementById('@Html.IdFor(model => model.Long)').value;
        long = long.replace(",", ".");
        var latLng = new google.maps.LatLng(lat, long);
        placeMarker(latLng);

        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
        });

    }

    function placeMarker(location) {

        if (marker) deleteMarker(marker.id);
        marker = new google.maps.Marker({
            position: location,
            map: map,
        });

        markers.push(marker);

        document.getElementById('@Html.IdFor(model => model.Lat)').value = location.lat();
        document.getElementById('@Html.IdFor(model => model.Long)').value = location.lng();

        reverseGeocoder(location, function (result, err) {
            address = result;
            address = address.split(',');
            var matches = address[1].match(/\d+/g);
            var zip;
            if (matches != null) {
                zip = address[1].slice(0, 7);
                address[1] = address[1].slice(7);
            }
            else {
                zip = "XX-XXX";
            }

            document.getElementById('@Html.IdFor(model => model.Address)').value = address[0].trim();
            document.getElementById('@Html.IdFor(model => model.City)').value = address[1].trim();
            document.getElementById('@Html.IdFor(model => model.ZipCode)').value = zip.trim();
        });

        var data = "";

        google.maps.event.addListener(marker, 'click', function (event) {
            if (infowindow) infowindow.close();
            infowindow = new google.maps.InfoWindow({ content: data });
            infowindow.open(map, marker);
            reverseGeocoder(location, function (result, err) {
                address = result;
                infowindow.setContent(result);
                document.getElementById("address").innerHTML = address;
            });
        });
    }

    function deleteMarker(markerId) {

        for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == markerId) {
                markers[i].setMap(null);
                markers.splice(i, 1);
            }
        }
    }

    function reverseGeocoder(latLng, callback) {
        geocoder.geocode({ 'location': latLng }, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                if (results[0]) {
                    callback(results[0].formatted_address, null);
                } else {
                    callback(null, status);
                }
            } else {
                window.alert('Geocoder failed due to: ' + status);
            }
        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);

</script>

<h2>Edit</h2>
<h4>Incident</h4>
<div id="googleMap" style="height: 500px; width: 100%"></div>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.AddDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AddDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AddDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfIncident, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfIncident, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfIncident, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TimeOfIncident, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TimeOfIncident, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TimeOfIncident, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(Model => Model.Type, ViewData["Types"] as List<SelectListItem>, htmlAttributes: new { @class = "form-control" })
                @Html.ActionLink("Add new", "Create", "IncidentTypes")
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.About, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Lat, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Lat, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Lat, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Long, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Long, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Long, "", new { @class = "text-danger" })
            </div>
        </div>

        @for (var i = 0; i < Model.Roles.Count(); i++)
        {
            var role = Model.Roles[i];
            @Html.HiddenFor(model => model.Roles[i].RoleId)
            @Html.HiddenFor(model => model.Roles[i].RoleName)
            @Html.LabelFor(model => model.Roles[i].RoleName, role.RoleName, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.CheckBoxFor(model => model.Roles[i].Selected, htmlAttributes: new { @class = "form-control" })
        }
        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

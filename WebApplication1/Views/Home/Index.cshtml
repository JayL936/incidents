@model IEnumerable<WebApplication1.Models.IncidentsViewModel>
@using Newtonsoft.Json

@{
    ViewBag.Title = "Home Page";
}
<script type="text/javascript" src="~/Scripts/jquery-2.2.2.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/t/dt/jq-2.2.0,dt-1.10.11,af-2.1.1,b-1.1.2,b-colvis-1.1.2,b-print-1.1.2,cr-1.3.1,fc-3.2.1,fh-3.1.1,r-2.0.2,sc-1.4.1,se-1.1.2/datatables.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/t/dt/jq-2.2.0,dt-1.10.11,af-2.1.1,b-1.1.2,b-colvis-1.1.2,b-print-1.1.2,cr-1.3.1,fc-3.2.1,fh-3.1.1,r-2.0.2,sc-1.4.1,se-1.1.2/datatables.css" />
<script src="http://maps.googleapis.com/maps/api/js?libraries=drawing,places"></script>
<script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer.js"></script>

<script type="text/javascript">

    var map;
    var counter = 0;
    var markers = [];
    var marker = new google.maps.Marker;
    var geocoder;
    var infowindow = new google.maps.InfoWindow;
    var markerCluster;
    var address;
    var incidents = [];


    function initialize() {
        var mapProp = {
            center: new google.maps.LatLng(52.229491, 21.002137),
            zoom: 12,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
        geocoder = new google.maps.Geocoder;

        var input = document.getElementById('pac-input');
        map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(input);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        autocomplete.addListener('place_changed', function() {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            placeMarker(place.geometry.location);
            
        });


        @foreach (var item in Model) {
        <text>
        var lat = @item.Lat.ToString().Replace(",", ".");
        var long = @item.Long.ToString().Replace(",", ".");
        var latLng = new google.maps.LatLng(lat, long);
        var id = @item.ID;
        var incidentType = "@item.Type.ToString()";
        var iconUrl = "@item.IconUrl";
        var street = "@item.Address";
        var city = "@item.City";
        incidents.push([id, street, city, incidentType, lat, long]);
        counter = (id >= counter) ? id : counter;
        placedbMarker(latLng, id, iconUrl);
        </text>
        }
        counter++;
        var drawingManager = new google.maps.drawing.DrawingManager({
            drawingControl: true,
            drawingControlOptions: {
                position: google.maps.ControlPosition.TOP_CENTER,
                drawingModes: [
                  google.maps.drawing.OverlayType.CIRCLE,
                  google.maps.drawing.OverlayType.POLYGON,
                  google.maps.drawing.OverlayType.POLYLINE,
                  google.maps.drawing.OverlayType.RECTANGLE
                ]
            },
            markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
            circleOptions: {
                //fillColor: '#ffff00',
                //fillOpacity: 1,
                //strokeWeight: 5,
                clickable: true,
                editable: true
                //  zIndex: 1
            },
            polygonOptions: {
                clickable: true,
                editable: true
            },
            polylineOptions: {
                clickable: true,
                editable: true
            },
            rectangleOptions: {
                clickable: true,
                editable: true
            }
        });
        drawingManager.setMap(map);


        markerCluster = new MarkerClusterer(map, markers);
        google.maps.event.addListener(map, 'click', function (event) {
            placeMarker(event.latLng);
        });

        google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
            var figure = event.overlay;
            if (event.type == google.maps.drawing.OverlayType.POLYGON) {
                checkPolygon(figure);
                google.maps.event.addListener(figure.getPath(), "set_at", function (event) {
                    checkPolygon(figure);
                });
            }
            if (event.type == google.maps.drawing.OverlayType.CIRCLE) {
                checkRectangleOrCircle(figure);
                google.maps.event.addListener(figure, "radius_changed", function (event) {
                    checkRectangleOrCircle(figure);
                });
                google.maps.event.addListener(figure, "center_changed", function (event) {
                    checkRectangleOrCircle(figure);
                });
            }
            if (event.type == google.maps.drawing.OverlayType.RECTANGLE) {
                checkRectangleOrCircle(figure);
                google.maps.event.addListener(figure, "bounds_changed", function (event) {
                    checkRectangleOrCircle(figure);
                });
            }
            google.maps.event.addListener(figure, "click", function(e) {
                figure.setMap(null);
                document.getElementById("counted").innerHTML = 0;
            });
        });

        var selected = false;
        var data;
        $('#example').DataTable( {

            data: incidents,
            columns: [
                { title: "ID" },
                { title: "Street"},
                { title: "City"},
              //  { title: "Latitude" },
              //  { title: "Longitude" },
                { title: "Type" }
            ],
            dom: 'lBfrtip',
            buttons: [
            {
                text: 'Edit',
                action: function ( e, dt, node, config ) {
                    if(selected)
                        window.location.href = "/Incidents/Edit/" + data[0];
                    else
                        alert('Please select one of incidents first.');
                }
            },
            {
                text: 'Details',
                action: function ( e, dt, node, config ) {
                    if(selected)
                        window.location.href = "/Incidents/Details/" + data[0];
                    else
                        alert('Please select one of incidents first.');
                }
            },
            {
                text: 'Delete',
                action: function ( e, dt, node, config ) {
                    if(selected)
                        window.location.href = "/Incidents/Delete/" + data[0];
                    else
                        alert('Please select one of incidents first.');
                }
            }
            ]
        });

        var table = $('#example').DataTable();

        $('#example tbody').on( 'click', 'tr', function () {
            if ( $(this).hasClass('selected') ) {
                $(this).removeClass('selected');
                selected = false;
            }
            else {
                table.$('tr.selected').removeClass('selected');
                $(this).addClass('selected');
                data = table.row(this).data();
                var latlng = new google.maps.LatLng(data[4], data[5]);
                map.setCenter(latlng);
                selected = true;
            }
        } );
    }

    function addIncidentToList(incident) {
        incidents.push(incident);
    }

    function checkRectangleOrCircle(figure) {
        var bounds = figure.getBounds();
        var resultColor;
        var number = 0;
        for (var i = 0; i < markers.length; i++)
            if(bounds.contains(markers[i].getPosition()))
                number++;

        resultColor = (number >=1 ) ? 'green' : 'red';
        document.getElementById("counted").innerHTML = number;
        figure.setOptions({ fillColor: resultColor, strokeColor: resultColor, strokeOpacity: 0.8 });
    }

    function checkPolygon(polygon) {
        var resultColor;
        var number = 0;
        for (var i = 0; i < markers.length; i++)
            if(google.maps.geometry.poly.containsLocation(markers[i].getPosition(), polygon)==true)
                number++;

        resultColor = (number >=1 ) ? 'green' : 'red';
        document.getElementById("counted").innerHTML = number;
        polygon.setOptions({ fillColor: resultColor, strokeColor: resultColor, strokeOpacity: 0.8 });
    }

    function placedbMarker(location, markerID, iconUrl) {
        var myIcon = new google.maps.MarkerImage(iconUrl);

        var dbmarker = new google.maps.Marker({
            position: location,
            map: map,
            id: markerID,
            icon: myIcon
        });
        //   var address;

        markers.push(dbmarker);

        var delButton = '<button id="delButton" data-id="' + counter + '">Delete incident</button>';
        var editButton = '<button id="editButton" data-id="' + counter + '">Edit incident</button>';

        document.getElementById("lat").innerHTML = location.lat();
        document.getElementById("lng").innerHTML = location.lng();

        var data = 'ID: ' + markerID +
            '<br>' + delButton +
            ' ' + editButton;

        google.maps.event.addListener(dbmarker, 'click', function (event) {

            if(infowindow) infowindow.close();
            infowindow = new google.maps.InfoWindow({content: data});
            infowindow.open(map, dbmarker);

            var buttonDel = document.getElementById('delButton');
            var buttonEdit = document.getElementById('editButton');
            buttonDel.onclick = function () {
                deldbMarker(dbmarker.id);
            };
            buttonEdit.onclick = function() {
                editdbMarker(dbmarker.id);
            }
        });
    }

    function editdbMarker(counter) {
        window.location.href = "/Incidents/Edit/" + counter;
    }

    function deldbMarker(counter) {
        window.location.href = "/Incidents/Delete/" + counter;
    }

    function placeMarker(location) {

        if(marker) deleteMarker(marker.id);
        marker = new google.maps.Marker({
            position: location,
            map: map,
            id: counter
        });
        var address;

        markers.push(marker);
        markerCluster.clearMarkers();
        markerCluster = new MarkerClusterer(map, markers);
        var deleteButton = '<button id="deleteButton" data-id="' + counter + '">Delete marker</button>';


        document.getElementById("lat").innerHTML = location.lat();
        document.getElementById("lng").innerHTML = location.lng();

        reverseGeocoder(location, function(result, err){
            address = result;
            document.getElementById('@Html.Id("address")').value = address;
        });

        var data = 'ID: ' + counter +
            '<br><br>' + deleteButton;

        google.maps.event.addListener(marker, 'click', function (event) {

            if(infowindow) infowindow.close();
            infowindow = new google.maps.InfoWindow({content: data});
            infowindow.open(map, marker);

            var buttonDelete = document.getElementById('deleteButton');
            buttonDelete.onclick = function () {
                deleteMarker(marker.id);
            };
        });
    }

    function deleteMarker(markerId) {

        for (var i = 0; i < markers.length; i++) {
            if (markers[i].id == markerId) {
                markers[i].setMap(null);
                markers.splice(i, 1);
                markerCluster.clearMarkers();
                markerCluster = new MarkerClusterer(map, markers);
            }
        }
    }

    function reverseGeocoder(latLng, callback) {
        geocoder.geocode({'location': latLng}, function(results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                if (results[0]) {
                    callback(results[0].formatted_address, null);
                } else {
                    callback(null, status);
                }
            } else {
                window.alert('Geocoder failed due to: ' + status);
            }
        });
    }

    function postData(url, allData) {
        form = document.createElement('form');
        for(data in allData)
        {
            var input = document.createElement('input');
            input.type = 'text';
            input.name = data;
            input.value = allData[data].toString();
            form.appendChild(input);
        }
        form.method = 'post';
        form.action = url;
        form.submit();
    }

    function addMarker(location, fulladdress) {
        document.getElementById("address").innerText = address + " udalo sie!";
        document.getElementById("test").innerText = location + " udalo sie!";

        var data = JSON.stringify(fulladdress) + JSON.stringify(location)
        postData('/Incidents/Create', {JsonStr : data})
        window.location.href = "/Incidents/Create";

    }

    function getDatatotheController(result) {
        var mode = result
        var parameters = { 'data': mode };

        $.ajax({
            type: "GET",
            url: '/Incidents/CreateIncident',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: parameters,
            success: successFunc,
            error: errorFunc
        });

        function successFunc(data) {
            alert(data);
        }

        function errorFunc() {
            alert(error);
        };
    }

    function displayLocation() {
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(data.Lat, data.Long),
            map: map
        });
    }

    google.maps.event.addDomListener(window, 'load', initialize);

</script>

@*<div class="jumbotron">


    </div>*@
<div>
    <input id="pac-input" class="controls" type="text"
           placeholder="Enter a location">
</div>
<div id="googleMap" style="width:100%;height:600px;"></div>

<div id="data">
    <br />
    <text>Count: </text><text id="counted">0</text><br /><br />
    @using (Html.BeginForm("CreateIncident", "Incidents"))
    {
        <text>
        Current address:
        </text>
        @Html.TextBox("address", null, htmlAttributes: new { @id = "address", @class = "form-control", @readonly = "readonly" })
        <br />
        <input type="submit" value="Create Incident" class="btn btn-default" />
    }
</div>
<br />
<div class="row">
    <table id="example" class="display" style="width:100%"></table>
    <text id="date" style="visibility: hidden">Date: @DateTime.Now.Date.ToShortDateString()</text><br />
    <text id="time" style="visibility: hidden">Time: @DateTime.Now.ToShortTimeString()</text><br />
    <text id="lat" style="visibility: hidden"></text><br />
    <text id="lng" style="visibility: hidden"></text><br />
</div>